/*!
 * Copyright 2019 SmugMug, Inc.
 * Licensed under the terms of the MIT license. Please see LICENSE file in the project root for terms.
 */

var request = require('../lib/request');
var validate = require('../lib/validate');
var json = require('../plugins/json');

/**
 * Creates a superagent plugin that simply adds api_key to
 * the query string of every request.
 * @param {String} str
 * @returns {Function}
 * @private
 */

function createAPIKeyPlugin(str) {
	return function (req) {
		return req.query({ api_key: str });
	};
}

/**
 * Dedupes an array, set, or string of extras and returns
 * a comma separated version of it
 * @param {String|Array|Set} extras
 * @returns {Function}
 * @private
 */

function processExtras(extras) {
	if (
		typeof extras !== 'string' &&
		!Array.isArray(extras) &&
		!(extras instanceof Set)
	) {
		throw new Error('Invalid type for argument "extras"');
	}

	if (typeof extras === 'string') {
		extras = extras.split(',');
	}

	if (Array.isArray(extras)) {
		extras = new Set(extras);
	}

	if (extras instanceof Set) {
		return Array.from(extras).join(',');
	}
}

/**
 * Creates a new Flickr API client. This "client" is a factory
 * method that creates a new superagent request pre-configured
 * for talking to the Flickr API. You must pass an "auth"
 * supergent plugin.
 * @param {Function} auth
 * @returns {Function}
 * @private
 * @see https://github.com/visionmedia/superagent
 */

function createClient(auth, opts) {
	var host;

	// allow passing just an api key instead of a function
	if (typeof auth === 'string') {
		auth = createAPIKeyPlugin(auth);
	}

	if (typeof auth !== 'function') {
		throw new Error('Missing required argument "auth"');
	}

	// options
	opts = opts || {};
	host = opts.host || 'api.flickr.com';

	if (opts.port) {
		host += ':' + opts.port;
	}

	return function (verb, method, args) {
		if (typeof args === 'undefined') {
			args = {};
		}

		if (args.extras) {
			args.extras = processExtras(args.extras);
		}

		return request(verb, 'https://' + host + '/services/rest')
			.query({ method: method })
			.query(args)
			.use(json)
			.use(auth);
	};

}

/**
 * Creates a new Flickr REST API client.
 *
 * You **must** pass a superagent plugin or your API key as the first
 * parameter. For methods that don't require authentication, you can simply
 * provide your API key. For methods that do require authentication,
 * use the [OAuth plugin]{@link Flickr.OAuth.createPlugin}.
 *
 * @constructor
 * @param {Function|String} auth An authentication plugin function or an API key
 *
 * @example <caption>Get info about a public photo with your API key</caption>
 *
 * var flickr = new Flickr(process.env.FLICKR_API_KEY);
 *
 * flickr.photos.getInfo({
 *   photo_id: 25825763 // sorry, @dokas
 * }).then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @example <caption>Searching for public photos with your API key</caption>
 *
 * var flickr = new Flickr(process.env.FLICKR_API_KEY);
 *
 * flickr.photos.search({
 *   text: 'doggo'
 * }).then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @example <caption>Authenticate as a user with the OAuth plugin</caption>
 *
 * var flickr = new Flickr(Flickr.OAuth.createPlugin(
 *   process.env.FLICKR_CONSUMER_KEY,
 *   process.env.FLICKR_CONSUMER_SECRET,
 *   process.env.FLICKR_OAUTH_TOKEN,
 *   process.env.FLICKR_OAUTH_TOKEN_SECRET
 * ));
 *
 * flickr.test.login().then(function (res) {
 *   console.log('yay!', res.body);
 * }).catch(function (err) {
 *   console.error('bonk', err);
 * });
 *
 * @classdesc
 *
 * All of the [REST API][services/api] methods are available on the
 * [Flickr]{@link Flickr} prototype. Each method accepts a single parameter
 * which is an optional hash of arguments. Refer to the [REST API][services/api]
 * docs for the full list of methods and their supported arguments.
 *
 * | Method | Permissions | Required Arguments |
 * | --- | --- | --- |
<%_ namespaces.forEach(function (ns) { _%>
<%_ getMethodsByNamespace(ns).forEach(function (method) { _%>
 * | [<%= method %>](<%= getDocsURL(method) %>) | `<%= getPerms(method) %>` <%= getPermsEmoji(method) %> | <%= getRequiredArguments(method).map(s => '`' + s + '`').join(', ') %> |
<%_ }); _%>
<%_ }); _%>
 */

function Flickr(auth, opts) {

	// allow creating a client without `new`
	if (!(this instanceof Flickr)) {
		return new Flickr(auth);
	}

	// create a new client and assign it to all of our namespaces
	<%_ namespaces.forEach(function (ns) { _%>
	this.<%= ns %>._ =
	<%_ }); _%>
	this._ = // create passthrough for future/undocumented endpoints
		createClient(auth, opts);
}

<% namespaces.forEach(function (ns) { %>
/**
 * @type {Object}
 * @ignore
 */

Flickr.prototype.<%= ns %> = {};
<% getMethodsByNamespace(ns).forEach(function (method) { %>
/**
 * <%= method %>
 * @param {Object} [args]
 * @returns {Request}
 * @ignore
 * @see <%= getDocsURL(method) %>
 */

Flickr.prototype.<%= ns %>.<%= basename(method) %> = function (args) {
	<%_ getRequiredArguments(method).forEach(function (arg) { _%>
	validate(args, '<%= arg %>');
	<%_ }); _%>
	return this._('<%= getHTTPVerb(method) %>', '<%= method %>', args);
};
<%_ }); _%>
<% }); %>

module.exports = Flickr;
